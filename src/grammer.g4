grammar grammer;
//r : NAME | TYPE | DEFFUNC | DEFVAR | DEF | ASSIGN | INT | DOUBLE | DATE | EXPR | ARGS | ARG | FUNCCALL | PROGRAM ;
r : pROGRAM;
NAME : [a-z]+[a-z|0-9]*;
TYPE : 'Int' | 'Double' | 'Date' | 'Contract' ;
tMP : TYPE ( COMMA TYPE )* ;
dEF : NAME DONOGHTE dEFF ;
dEFFUNC : OP tMP CP TO TYPE ;
dEFF : TYPE | dEFFUNC | S1;
aSSIGN : NAME EQUAL eXPR ;
iNT : ADAD+;
dOUBLE : ADAD+DOT ADAD* ;
eXPR : iNT eXPR2 | NAME eXPR2 | dOUBLE eXPR2 | OP eXPR CP eXPR2 | fUNCCALL eXPR2 | fUNCCALL | iNT | NAME | dOUBLE | OP eXPR CP ;
eXPR2 : S3 eXPR ;
aRGS : (eXPR(COMMA eXPR)*) ;
fUNCCALL :  FUNCCALL2 OP eXPR COMMA eXPR CP | NAME OP aRGS CP | S4 OP eXPR COMMA eXPR CP | S5 | S6 OP eXPR CP ;
FUNCCALL2 : 'and' | 'or' | 'then' | 'scaleX' | 'scale' | 'truncate';
pROGRAM : (aSSIGN | dEF)+ ;
WS : ('\n'|'\r'|'\t' | ' ')+ -> skip;
OP : '(';
CP : ')';
TO : ' ->';
COMMA : ',';
//COMMAP : ',';
DONOGHTE : '::';
EQUAL : '=';
DOT : '.';
ADAD : [0-9];
S1 : 'TimeFunc' '(' 'Date' ')' '->' 'Double';
S3 : '*'|'+'|'-'|'/';
S4 : 'mkdate';
S5 : 'one()';
S6 : 'give';